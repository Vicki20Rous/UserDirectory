{"version":3,"sources":["utils/api.js","components/Hero/index.js","components/Card/index.js","components/SearchHeadings/index.js","components/SearchBox/index.js","components/Wrapper/index.js","pages/ProfileDirectory.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Hero","className","Card","props","results","map","src","picture","medium","alt","name","first","last","email","phone","location","country","CardHeader","class","scope","onClick","handleSort","id","SearchBox","htmlFor","value","search","onChange","handleInputChange","list","type","placeholder","Wrapper","EmployeeDirectory","state","ascending","event","preventDefault","setState","target","toLowerCase","handleSortAZ","handleSortZA","handleSortLocation","sort","a","b","localeCompare","loadEmployees","API","then","res","data","catch","err","console","log","this","filter","includes","SearchHeadings","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.f54c0e41.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default {\r\n  // Retrieve 20 random users\r\n  getEmployees: function () {\r\n    \r\n    return axios.get('https://randomuser.me/api/?results=20&nat=us');\r\n  \r\n  }\r\n\r\n};","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Hero = () => {\r\n  return (\r\n    <div className=\"jumbotron jumbotron-fluid header\">\r\n      <div className=\"container\">\r\n        <h1 className=\"display-4\">Employee Directory</h1>\r\n        <h4 className=\"lead\">Use searchbox to filter and sort by employee.</h4>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Hero;","import React from \"react\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <tbody>\r\n      {props.results.map((results) => (\r\n        <tr>\r\n          <td><img src={results.picture.medium} alt=\"profilePicture\" /></td>\r\n          <td> {results.name.first}</td>\r\n          <td> {results.name.last}</td>\r\n          <td> {results.email}</td>\r\n          <td> {results.phone}</td>\r\n          <td>{results.location.country}</td>\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"../Card\";\r\n\r\nconst CardHeader = (props) => {\r\n  return (\r\n    <div>\r\n      <table class=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">Photo</th>\r\n            <th scope=\"col\">First Name<span onClick={props.handleSort}><i id=\"name\" className={props.class}></i></span></th>\r\n            <th scope=\"col\">Last Name<span onClick={props.handleSort}><i id=\"name\" className={props.class}></i></span></th>\r\n            <th scope=\"col\">Email<span onClick={props.handleSort}><i id=\"email\" className={props.class}></i></span></th>\r\n            <th scope=\"col\">Phone<span onClick={props.handleSort}><i id=\"phone\" className={props.class}></i></span></th>\r\n            <th scope=\"col\">Location<span onClick={props.handleSort}><i id=\"location\" className={props.class}></i></span></th>\r\n          </tr>\r\n        </thead>\r\n        <Card results={props.results}></Card>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardHeader;","import React from \"react\";\r\n\r\nconst SearchBox = (props) => {\r\n  return (\r\n    <form className=\"search\">\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"name\">Search Employee:</label>\r\n        <input\r\n          value={props.search}\r\n          onChange={props.handleInputChange}\r\n          name=\"search\"\r\n          list=\"names\"\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Name\"\r\n          id=\"name\"\r\n        />\r\n        {/* Sort button in searchbox */}\r\n        <button\r\n          type=\"submit\"\r\n          onClick={props.handleSort}\r\n          className=\"btn btn-dark\"\r\n        >\r\n          Sort A-Z\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Wrapper = (props) => {\r\n  return <main className=\"wrapper\" {...props} />;\r\n}\r\n\r\nexport default Wrapper;","import React, { Component } from \"react\";\r\nimport API from \"../utils/api\";\r\nimport Hero from \"../components/Hero\";\r\nimport SearchHeadings from \"../components/SearchHeadings\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Wrapper from \"../components/Wrapper\";\r\n\r\n\r\nclass EmployeeDirectory extends Component {\r\n  state = {\r\n    search: \"\",\r\n    ascending: \"\",\r\n    location: \"\",\r\n    results: []\r\n  };\r\n\r\n  // When the component mounts, load available employees to be displayed\r\n  componentDidMount() {\r\n    this.loadEmployees();\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    event.preventDefault();\r\n    this.setState({ search: event.target.value.toLowerCase() });\r\n  };\r\n\r\n  // sort in ascending or descending order\r\n  handleSort = (event) => {\r\n    event.preventDefault();\r\n    const { ascending } = this.state;\r\n    if (ascending === false || ascending === \"\") {\r\n      // A to Z\r\n      this.handleSortAZ();\r\n    } else if (ascending === true) {\r\n      // Z to A\r\n      this.handleSortZA();\r\n    } else if (ascending === true) {\r\n      // location\r\n      this.handleSortLocation();\r\n    }\r\n    return;\r\n  };\r\n\r\n  // sort A to Z\r\n  handleSortAZ = () => {\r\n    this.setState({\r\n      results: this.state.results.sort((a, b) =>\r\n        a.name.first.localeCompare(b.name.first)\r\n      ),\r\n      ascending: true,\r\n    });\r\n  };\r\n\r\n  // sort Z to A\r\n  handleSortZA = () => {\r\n    this.setState({\r\n      results: this.state.results.sort((a, b) =>\r\n        b.name.first.localeCompare(a.name.first)\r\n      ),\r\n      ascending: false,\r\n    });\r\n  };\r\n\r\n  // load employee list\r\n  loadEmployees = () => {\r\n    API.getEmployees()\r\n      .then((res) =>\r\n        this.setState({\r\n          results: res.data.results,\r\n        })\r\n      )\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    const filter = this.state.results.filter((results) =>\r\n      results.name.first.toLowerCase().includes(this.state.search)\r\n    );\r\n\r\n    return (\r\n      <Wrapper>\r\n\r\n        <div>\r\n          <h1 className=\"text-center\"><Hero /></h1>\r\n          \r\n          <SearchBox\r\n            handleSort={this.handleSort}\r\n            handleInputChange={this.handleInputChange}\r\n          ></SearchBox>\r\n\r\n          <SearchHeadings results={filter}></SearchHeadings>\r\n        </div>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EmployeeDirectory;","import React from \"react\";\nimport EmployeeDirectory from \"./pages/ProfileDirectory\";\nimport \"./App.css\"\n\nconst App = () => {\n  return (\n  <EmployeeDirectory />\n  )\n};\n  \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}